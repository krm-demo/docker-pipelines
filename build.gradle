plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.4'

    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'com.netflix.nebula.info' version "12.1.6"

    id "jacoco"
    id "org.barfuin.gradle.jacocolog" version "3.1.0"
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'org.krmdemo.app'
version = '1.0'
description = "'Hello' Command-Line Application"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// the construction bellow is just a way to detect the version of spring-boot
// gradle - is the most elegant and evident tool in the world !!!
def springBootVersion = project.rootProject
    .extensions
    .getByType(VersionCatalogsExtension.class)
    .named("libs")
    .findVersion("org-springframework-boot-spring-boot-starter")
    .get()

springBoot { pl ->
    buildInfo {
        properties {
            additional = [
                'description': project.getDescription(),
                'java.source': JavaVersion.VERSION_21,
                'java.target': JavaVersion.VERSION_21,
                'tool.name': 'gradle',
                'tool.version': "${gradle.gradleVersion}",
                'spring.boot.version': "${springBootVersion}",
            ]
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.slf4j:slf4j-api:2.0.9'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'commons-io:commons-io:2.15.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

plugins.withType(nebula.plugin.info.reporting.InfoPropertiesFilePlugin).configureEach { pl ->
    pl.manifestTask.configure {
        doLast {
            var fileInfo = file(project.layout.buildDirectory.file("resources/main/gradle-info.properties"))
            println("-- copying the gradle-info to '${fileInfo}' ...")
            fileInfo.text = """\
# --------------------------------------------------------------------
# gradle-info, generated with 'com.netflix.nebula.info' gradle-plugin:
# --------------------------------------------------------------------
${file(propertiesFile.get()).text}
"""
            var fileEnvProps = file(project.layout.buildDirectory.file("resources/main/gradle-env.properties"))
            println("-- writing the env-vars into '${fileEnvProps}' ...")
            fileEnvProps.text = """\
# -----------------------------------------------------
#      environment variables during gradle-build:
# -----------------------------------------------------
${System.getenv().sort().collect{ envName, envValue -> "$envName=$envValue" }.join("\n")}
"""
            var fileSysProps = file(project.layout.buildDirectory.file("resources/main/gradle-system.properties"))
            println("-- writing the sys-props into '${fileSysProps}' ...")
            fileSysProps.text = """\
# -----------------------------------------------------
#      java system-properties during gradle-build:
# -----------------------------------------------------
${System.getProperties().sort().collect{ propName, propValue -> "$propName=$propValue" }.join("\n")}
"""
            var fileDockerInfoTxt = file(project.layout.buildDirectory.file("resources/main/docker-system-info.txt"))
            println("-- writing the docker-info into '${fileDockerInfoTxt}' as text ...")
            fileDockerInfoTxt.text = "docker system info".execute().text
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

sonar {
    properties {
        property "sonar.projectKey", "krm-demo"
        property "sonar.organization", "krm-demo"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
